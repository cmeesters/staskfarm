#!/bin/bash

# adapted from https://github.com/paddydoyle/staskfarm
# v1 2017/04/20 C.Meesters (ZDV)
# v2 2017/08/18 - dummy commands introduced for tasknumbers != ntask
# Simple taskfarm script for a Slurm environment.
#
# Purpose: take a file of tasks (one per line) and create slurm multi-prog
# config to execute those tasks. Each task can comprise of multiple commands.
#
# Background: the slurm multi-prog setup can be difficult for some
# scenarios:
# * only one executable can be specified per task (e.g. no chain of commands
#   or shell loops are possible, such as "cd dir01; ./my_exec")
# * a limitation on the maximum number of characters per task description (256)
# * building the multi-prog file can be onerous, if you do not have the
#   luxury of using the '%t' tokens in your commands or arguments
# * the number of commands must match exactly the number of slurm tasks (-n),
#   which means updating two files if you wish to add or remove tasks
#

VERSION='0.2.1'

function die() {
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

function begins_with_short_option() {
    local first_option all_short_options
    all_short_options='vh'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command=""
_arg_threads=0

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose=off

# DO NOT CHANGE THESE DEFAULTS ON MOGON (I or II)
SCRATCHDIR="/localscratch/${SLURM_JOB_ID}"

print_help ()
{
    echo "The general script's help msg"
    printf "Usage: $(basename $0) [-t|--threads <arg>] [--(no-)verbose] [-v|--version] [-h|--help] <command> [path(s)]\n"
    printf "\t%s\n" "<command>: the command to be carried out in the task farm"
    printf "\t%s\n" "-t,--threads: how many threads can 'command' sensibly use (default: '"0"')"
    printf "\t%s\n" "--verbose,--no-verbose: Turn on verbose mode (off by default)"
    printf "\t%s\n" "-v,--version: Prints version"
    printf "\t%s\n" "-h,--help: Prints help"

cat <<-EOM
    
    The <command_filename> must have one individual task per
    line. The task can comprise of multiple bash shell commands,
    each separated by a semi-colon (;).
    
    For example, the following shows 6 tasks:
    
        ./my_prog my_input01 > my_output01
        ./my_prog my_input02 > my_output02
        ./my_prog my_input03 > my_output03
        ./my_prog my_input04 > my_output04
        ./my_prog my_input05 > my_output05
        ./my_prog my_input06 > my_output06
    
    A more complex example, showing 4 tasks which include loops:
    
        cd sample01; for i in controls patients; do ./my_prog \$i; done
        cd sample02; for i in controls patients; do ./my_prog \$i; done
        cd sample03; for i in controls patients; do ./my_prog \$i; done
        cd sample04; for i in controls patients; do ./my_prog \$i; done
    
    Enabling verbose mode prints each command to stdout as it is
    read from the command file.
    
    Limitations:
    
    * it writes the list of tasks to K files, where K is the value of
      of the SLURM_NTASKS environment variable. The tasks are written
      in a simple round-robin manner over the K files. This makes no
      provision for how quickly any individual task might execute
      compared to the others, and so an equal division of labour
      between the SLURM_NTASKS processors is not guaranteed at all.
    
    * it makes no decisions about memory usage per task. The
      assumption is that the user has already calculated memory
      consumption, and has used a combination of "#SBATCH -n <n>"
      and "#SBATCH -N <N>" to fit. For example, if the node has 8
      cores and 16 GB of RAM, then "#SBATCH -n 8" will spread the
      tasks over 8 cores on one machine, and will assume that the
      total memory usage is no more than 16GB (2GB per task). If you
      need 4GB per task, then instead you must use "#SBATCH -n 8"
      and "#SBATCH -N 2" in order to spread the 8 tasks
      over 2 nodes.
    
    * no output redirection is performed, so any stdout/stderr will
      be sent to the slurm-NNNNN.out file by default. This can
      be changed by adding individual redirects to each task.
      Care must be taken in that case so that the output files
      have unique names/paths.
    
    Note that this program will create a temporary directory
    (called /localscratch/\${SLURM_JOB_ID}) in which to store
    the slurm multi-config files.
EOM
}

# THE PARSING ITSELF
while test $# -gt 0; do
    _key="$1"
    case "$_key" in
    -t*|--threads|--threads=*)
        _val_from_long="${_key##--threads=}"
        _val_from_short="${_key##-t}"
        if [[ "$_val_from_long" != "$_key" ]]; then
            _val="$_val_from_long"
        elif [[ "$_val_from_short" != "$_key" && -n "$_val_from_short" ]]; then
            _val="$_val_from_short"
        else
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _val="$2"
                shift
        fi
        _arg_threads="$_val"
        ;;
    --no-verbose|--verbose)
        _arg_verbose="on"
        test "${1:0:5}" = "--no-" && _arg_verbose="off"
        ;;
    -v*|--version)
        echo "$(basename $0) v${VERSION}"
        exit 0
        ;;
    -h*|--help)
        print_help
        exit 0
        ;;
    *)
        _positionals+=("$1")
        ;;
    esac
    shift
done

_positional_names=('_arg_command' )
_required_args_string="'command'"
test ${#_positionals[@]} -lt 1 && _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
_our_args=$((${#_positionals[@]} - ${#_positional_names[@]}))
for (( ii = 0; ii < $_our_args; ii++)); do
    _positional_names+=("_arg_leftovers[(($ii + 0))]")
done

for (( ii = 0; ii < ${#_positionals[@]}; ii++)); do
    eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "ERROR: argument parsing not successful. Please report this error." 1
done

######################################################
# Sanity check: abort without input files or given tasks
######################################################
if [[ ${#_arg_leftovers[@]} -eq 0 && "x${SLRUM_NTASKS}" = "x" ]]; then
    echo "$(basename $0): ERROR: either --ntasks or input files have to be defined. Exiting."
    exit 1
fi

######################################################
# Does the command file exist?
######################################################
if [[ ! -f "${_arg_command}" && ! -z "$(command ${_arg_command})" ]]; then
   echo "$(basename $0): ERROR: commands file \"${_arg_command}\" does not exist. Exiting."
   exit 1
fi

######################################################
# Check for slurm environment
######################################################
if [ -z "$SLURM_JOB_ID" ] ; then
    echo "$(basename $0): ERROR: must be executed from within a SLURM allocation. Exiting."
    exit 1
fi

declare -i LIMIT=1000000
if [[ ! -z "$SLURM_NTASKS" ]]; then
    LIMIT=$SLURM_NTASKS
else
   declare -i no_of_nodes=$(scontrol show hostname $SLURM_JOB_NODELIST | paste -d, -s | tr ',' ' ' | wc -w)

   if [ $no_of_nodes -gt 1 ]; then
      LIMIT=$(($SLURM_CPUS_ON_NODE * $no_of_nodes))
   else
      LIMIT=$SLURM_CPUS_ON_NODE
   fi
fi

if [[ "${verbose}" = "on" ]]; then
    echo ""
    echo "-------------------- $(basename $0) START --------------------"
    echo "Reading commands from file: ${command_filename}."
    echo "There are $(cat ${command_filename} | wc -l) lines in the file."
    echo "They will be spread over the ${SLURM_NTASKS} processors:   ${SLURM_TASKS_PER_NODE} tasks on ${SLURM_NODELIST}"
fi

######################################################
# Warn if no output redirection
######################################################
if [[ "${verbose}" = "on" ]] && ! grep -q '>' ${_arg_command}; then
    echo ""
    echo "WARNING: there is no individual task output redirection in the ${command_filename}"
    echo "         file. This could potentially be a problem. Output of all individual"
    echo "         tasks will likely be merged in the slurm output file ('slurm-${SLURM_JOB_ID}.out')."
    echo ""
fi

######################################################
# Main loop:
# individual multi-prog shell scripts depending on
# input (tasks or file names)
######################################################
if [[ ${#_arg_leftovers[@]} -gt 0 ]]; then
    iter=0
    while [ $iter -lt $_our_args ]; do 
        ######################################################
        # Creating the taskfarm multiprog file
        ######################################################
        MULTIFILE=$(mktemp "${SCRATCHDIR}/multiconf_$iter.XXXXXX") || { echo "$(basename 0): ERROR: Failed to create temp file"; exit 1; }
        for (( i = 0; i < $LIMIT && $iter < $_our_args; i++ )); do
            #fname=${_arg_leftovers[$(($i + $iter))]}
            fname=${_arg_leftovers[$iter]}
            iter=$(($iter + 1))
            if [[ "${verbose}" = "on" ]]; then
                echo "Adding the following file name to ${MULTIFILE} (if existing): $fname"
            fi
            echo "$i $iter $_arg_command $fname" 

            # output only, if line not empty or does not start with '#'
            [[ -e $fname ]] && echo "$i $_arg_command $fname" >> $MULTIFILE
        done 
        # is the multifile incomplete? (usually at remaining trunk)
        set -x
        declare -i no_of_lines=$(wc -l $MULTIFILE | cut -d ' ' -f1)
        if [[ $no_of_lines -lt $LIMIT ]]; then
            # produce a dummy file
            dummy=$SCRATCHDIR/dummy.sh
            echo "#!/bin/bash" > $dummy
            echo "exit" >> $dummy
            chmod +x $dummy
            for ((i = $no_of_lines ; i < $((LIMIT)) ; i++)); do
                echo "$i $dummy " >> $MULTIFILE
            done
            # this dummy file needs to be present on every node,
            # as it is not part the env. as other scripts / apps.
            sbcast -f $dummy $SCRATCHDIR/$(basename $dummy) 
        fi
        set +x
        cp $MULTIFILE .
        if [[ $_arg_threads -gt 0 ]]; then
            export OMP_NUM_THREADS=$_arg_threads && 
                   srun --hint=multithread --cpu_bind=ldoms --cpus-per-task=$_arg_threads --multi-prog $MULTIFILE
        else
            srun --multi-prog $MULTIFILE
        fi
    done
else
   for (( item = 0; item < $SLRUM_NTASKS; item++)); do
       echo "$_arg_command" >> $MULTIFILE
   done
   if [[ $_arg_threads -gt 0 ]]; then
       export OMP_NUM_THREADS=$_arg_threads && 
              srun --hint=multithread --cpu_bind=ldoms --cpus-per-task=$_arg_threads --multi-prog $MULTIFILE
   else
       srun --multi-prog $MULTIFILE
   fi
fi

echo "==================== $(basename $0) END ===================="

